<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="60017c1e-8be2-4a76-8dbb-5b30f8e192d7" activeEnvironment="Default" name="Sodimac Stock Mock Service" resourceRoot="" soapui-version="5.3.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="7f3a8017-5e2c-47dc-9831-9469e6030eaa" port="3001" path="/" host="Users-iMac.local" name="stock" docroot=""><con:settings/><con:properties/><con:restMockAction name="/stores" method="GET" resourcePath="/stores" id="c70dcced-321c-42d8-8aaa-452fd68ce9fa"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="All" id="1561d54b-fb21-49f7-a090-9afc3ca44b81" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
	{
		"id": "SC1",
		"name": "San Antonio 3000",
		"comuna": "Santiago Centro"
	},
	{
		"id": "LC1",
		"name": "Parque Arauco",
		"comuna": "Las Condes"
	},
	{
		"id": "LC2",
		"name": "Alto Las Condes",
		"comuna": "Las Condes"
	},
	{
		"id": "VC1",
		"name": "HomeCenter Nueva Costanera",
		"comuna": "Vitacura"
	},
	{
		"id": "SB1",
		"name": "San Bernardo La Lleva",
		"comuna": "San Bernardo"
	}
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/stock/product" method="GET" resourcePath="/stock/product" id="b9a423e3-979d-44cc-990f-3e2d623adfc8"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>

return "Response 1"
</con:dispatchPath><con:response name="Response 1" id="680c4e3c-288b-4017-ace5-ae5cbbd3dd0f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>def requestPath = mockRequest.getPath()
def tokens = requestPath.tokenize('/')

requestContext.product = tokens[2]</con:script><con:responseContent>[
	{
	"store": "SC1",
	"product": "${product}",
	"stock": 12
	},
	{
	"store": "LC1",
	"product": "${product}",
	"stock": 101
	},
	{
	"store": "LC2",
	"product": "${product}",
	"stock": 77
	},
	{
	"store": "VC1",
	"product": "${product}",
	"stock": 8
	},
	{
	"store": "SB1",
	"product": "${product}",
	"stock": 12
	}
]</con:responseContent></con:response><con:response name="Response 2" id="465c33b6-08f1-43e6-bb3f-5162cdda87eb" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>def requestPath = mockRequest.getPath()
def tokens = requestPath.tokenize('/')

requestContext.product = tokens[2]</con:script><con:responseContent>[
	{
	"store": "SC1",
	"product": "${product}",
	"stock": 114
	},
	{
	"store": "LC1",
	"product": "${product}",
	"stock": 101
	},
	{
	"store": "LC2",
	"product": "${product}",
	"stock": 211
	},
	{
	"store": "VC1",
	"product": "${product}",
	"stock": 0
	},
	{
	"store": "SB1",
	"product": "${product}",
	"stock": 0
	}
]</con:responseContent></con:response><con:response name="Response 3" id="a77bb2b2-ebcb-456e-a838-1dc51f453d92" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>def requestPath = mockRequest.getPath()
def tokens = requestPath.tokenize('/')

requestContext.product = tokens[2]</con:script><con:responseContent>[
	{
	"store": "SC1",
	"product": "${product}",
	"stock": 14
	},
	{
	"store": "LC1",
	"product": "${product}",
	"stock": 0
	},
	{
	"store": "LC2",
	"product": "${product}",
	"stock": 1
	},
	{
	"store": "VC1",
	"product": "${product}",
	"stock": 81
	},
	{
	"store": "SB1",
	"product": "${product}",
	"stock": 112
	}
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/stock/store" method="GET" resourcePath="/stock/store" id="e98a9d40-d820-4b6e-98cd-c2dd96755e47"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="5280ebf9-2d76-4bd3-b386-244d9d3a5d10" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>def requestPath = mockRequest.getPath()
def tokens = requestPath.tokenize('/')

requestContext.store = tokens[2]
requestContext.product = tokens[4]</con:script><con:responseContent>{
	"store": "${store}",
	"product": "${product}",
	"stock": 10
}</con:responseContent></con:response><con:response name="Response 2" id="4ee62470-78d0-44b6-a476-5d8da5c8be71" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>def requestPath = mockRequest.getPath()
def tokens = requestPath.tokenize('/')

requestContext.store = tokens[2]
requestContext.product = tokens[4]</con:script><con:responseContent>{
	"store": "${store}",
	"product": "${product}",
	"stock": 100
}</con:responseContent></con:response><con:response name="Response 3" id="bbe88d40-88eb-47c9-94d8-ad01184f3159" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>def requestPath = mockRequest.getPath()
def tokens = requestPath.tokenize('/')

requestContext.store = tokens[2]
requestContext.product = tokens[4]</con:script><con:responseContent>{
	"store": "${store}",
	"product": "${product}",
	"stock": 0
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>